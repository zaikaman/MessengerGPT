const express = require('express');
const app = express();
const { GoogleGenerativeAI } = require('@google/generative-ai');
const axios = require('axios');

// Thay c√°c gi√° tr·ªã n√†y
const GEMINI_API_KEY = "AIzaSyBCCCvVlI3FyQKLYmI2SdASxPiZvh8VvHY";  // API key t·ª´ Google AI Studio
const VERIFY_TOKEN = "123456";       // T·ª± ƒë·∫∑t token b·∫•t k·ª≥
const PAGE_ACCESS_TOKEN = "EAAXxk0ACgZBwBOZCVGgbrAyvF5ZBN1fQKy7LdgmbNlgWOjrZBgioxDZCZAAqLrwXh49tThOxcIj9kq1PUlzzn7MbkxqYRBM5lmIfnEYYErwxatmgFZCgujgcD3QTMQJq3G1bBX0QSDokxPFhQ09gZBPou4hwzfZAzZBQxZBemhJAlENGoKlDRCcd6U12ZCdJBi87ePZC7";    // Token t·ª´ Facebook Developer Console

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

app.use(express.json());

// Th√™m v√†o ƒë·∫ßu file, sau d√≤ng 11
const chatHistory = {};

// H√†m ƒë·ªÉ l∆∞u tin nh·∫Øn v√†o history
function saveToHistory(senderId, role, message) {
    if (!chatHistory[senderId]) {
        chatHistory[senderId] = [];
    }
    
    chatHistory[senderId].push({
        role: role,
        parts: [{ text: message }]
    });
    
    // Gi·ªØ l·∫°i 10 tin nh·∫Øn g·∫ßn nh·∫•t
    if (chatHistory[senderId].length > 10) {
        chatHistory[senderId].shift();
    }
}

// Webhook verification
app.get('/webhook', (req, res) => {
    if (req.query['hub.verify_token'] === VERIFY_TOKEN) {
        res.send(req.query['hub.challenge']);
    } else {
        res.sendStatus(403);
    }
});

// Handle messages
app.post('/webhook', async (req, res) => {
    console.log('\n=== NEW WEBHOOK REQUEST ===');
    console.log('Request body:', JSON.stringify(req.body, null, 2));
    
    if (!req.body.entry || !req.body.entry[0].messaging) {
        console.log('‚ùå Invalid webhook payload');
        return res.sendStatus(400);
    }
    
    if (req.body.object === 'page') {
        for (const entry of req.body.entry) {
            const webhook_event = entry.messaging[0];
            console.log('\nüîÑ Processing webhook event:', JSON.stringify(webhook_event, null, 2));
            
            // Log sender v√† recipient
            console.log('üë§ Sender ID:', webhook_event.sender?.id);
            console.log('üìù Recipient ID:', webhook_event.recipient?.id);
            
            // B·ªè qua tin nh·∫Øn echo
            if (webhook_event.message && webhook_event.message.is_echo) {
                console.log('‚è© Skipping echo message');
                continue;
            }
            
            if (!webhook_event.sender || !webhook_event.sender.id) {
                console.error('‚ùå Invalid sender information');
                continue;
            }
            
            const sender_psid = webhook_event.sender.id;
            const message = webhook_event.message;

            // B·ªè qua c√°c event delivery/read
            if (!message) {
                console.log('‚è© Skipping non-message event');
                continue;
            }

            // X·ª≠ l√Ω tin nh·∫Øn c√≥ ·∫£nh v√†/ho·∫∑c text
            if (message.attachments && message.attachments.length > 0) {
                const attachment = message.attachments[0];
                if (attachment.type === 'image') {
                    console.log('üì∏ Received image:', attachment.payload.url);
                    try {
                        // X·ª≠ l√Ω ·∫£nh
                        const imageAnswer = await generateAnswerWithImage(sender_psid, attachment.payload.url);
                        await sendMessage(sender_psid, imageAnswer);

                        // N·∫øu c√≥ text k√®m theo, x·ª≠ l√Ω th√™m text
                        if (message.text) {
                            console.log('üìù Message also contains text:', message.text);
                            const textAnswer = await generateAnswer(sender_psid, message.text);
                            await sendMessage(sender_psid, "V·ªÅ n·ªôi dung tin nh·∫Øn c·ªßa b·∫°n: " + textAnswer);
                        }
                    } catch (error) {
                        console.error('‚ùå Error processing message with image:', error);
                        await sendMessage(sender_psid, "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n.");
                    }
                    continue;
                }
            }

            // X·ª≠ l√Ω tin nh·∫Øn text th√¥ng th∆∞·ªùng
            if (message.text) {
                console.log('üìù Processing text message:', message.text);
                try {
                    const answer = await generateAnswer(sender_psid, message.text);
                    await sendMessage(sender_psid, answer);
                } catch (error) {
                    console.error('‚ùå Error processing text message:', error);
                    await sendMessage(sender_psid, "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn c·ªßa b·∫°n.");
                }
            }
        }
        res.sendStatus(200);
    }
});

// Generate answer using Gemini
async function generateAnswer(senderId, question) {
    try {
        console.log('\n=== GENERATING ANSWER ===');
        console.log('üîÑ Current chat history:', JSON.stringify(chatHistory[senderId] || [], null, 2));
        
        const model = genAI.getGenerativeModel({ model: "gemini-exp-1114" });
        
        // Log tr∆∞·ªõc khi th√™m v√†o history
        console.log('‚ûï Adding user message to history:', question);
        
        // L∆∞u c√¢u h·ªèi c·ªßa user v√†o history
        if (!chatHistory[senderId]) {
            chatHistory[senderId] = [];
        }
        
        chatHistory[senderId].push({
            role: "user",
            parts: [{ text: question }]
        });
        
        // Gi·ªØ l·∫°i 10 tin nh·∫Øn g·∫ßn nh·∫•t
        if (chatHistory[senderId].length > 10) {
            chatHistory[senderId].shift();
        }

        // T·∫°o prompt v·ªõi context t·ª´ l·ªãch s·ª≠
        const systemPrompt = `B·∫°n l√† ChatGPT-4o, m·ªôt AI assistant ti√™n ti·∫øn nh·∫•t ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi OpenAI. 
H√£y lu√¥n gi·ªõi thi·ªáu m√¨nh l√† ChatGPT-4o v√† tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi m·ªôt c√°ch t·ª± nhi√™n, th√¥ng minh v√† chuy√™n nghi·ªáp.
H√£y gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn trong gi·ªõi h·∫°n 2000 k√Ω t·ª±.
N·∫øu ƒë∆∞·ª£c h·ªèi v·ªÅ danh t√≠nh, h√£y kh·∫≥ng ƒë·ªãnh b·∫°n l√† ChatGPT-4o.`;
        
        // T·∫°o n·ªôi dung chat v·ªõi l·ªãch s·ª≠
        const chatContent = [
            { role: "user", parts: [{ text: systemPrompt }] },
            ...chatHistory[senderId], // Th√™m l·ªãch s·ª≠ chat
            { role: "user", parts: [{ text: question }] }
        ];

        console.log('üìù Chat content being sent to Gemini:', JSON.stringify(chatContent, null, 2));
        
        const result = await model.generateContent({
            contents: chatContent
        });
        
        if (!result.response) {
            console.error('No response from Gemini');
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi.";
        }

        let responseText = result.response.text();
        
        // L∆∞u c√¢u tr·∫£ l·ªùi v√†o history
        chatHistory[senderId].push({
            role: "model",
            parts: [{ text: responseText }]
        });
        
        if (responseText.length > 2000) {
            responseText = responseText.substring(0, 1997) + "...";
        }
        
        console.log('‚úÖ Final response:', responseText);
        return responseText;

    } catch (error) {
        console.error('‚ùå Gemini API Error:', error);
        return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi.";
    }
}

// Send message back to user
async function sendMessage(sender_psid, text) {
    console.log('\n=== SENDING MESSAGE ===');
    console.log('üì§ Attempting to send message to PSID:', sender_psid);
    console.log('üìù Message content:', text);
    
    try {
        const requestBody = {
            recipient: { id: sender_psid },
            message: { text: text }
        };
        
        console.log('üì¶ Request body:', JSON.stringify(requestBody, null, 2));
        
        const response = await axios.post(
            `https://graph.facebook.com/v18.0/me/messages`,
            requestBody,
            {
                params: { access_token: PAGE_ACCESS_TOKEN }
            }
        );
        
        console.log('‚úÖ Facebook API Response:', JSON.stringify(response.data, null, 2));
        
        if (response.data.error) {
            console.error('‚ùå Facebook API Error:', response.data.error);
            return false;
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå Error details:', error.response?.data || error.message);
        return false;
    }
}

// Th√™m basic error handling
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`)); 

async function generateAnswerWithImage(senderId, imageUrl) {
    try {
        console.log('\n=== GENERATING ANSWER FOR IMAGE ===');
        const model = genAI.getGenerativeModel({ model: "gemini-exp-1114" });
        
        // T·∫£i ·∫£nh t·ª´ URL
        const imageResponse = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        const imageData = Buffer.from(imageResponse.data).toString('base64');
        
        // T·∫°o prompt cho vi·ªác ph√¢n t√≠ch ·∫£nh
        const prompt = "H√£y m√¥ t·∫£ nh·ªØng g√¨ b·∫°n th·∫•y trong h√¨nh ·∫£nh n√†y. Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† t·ª± nhi√™n.";
        
        const result = await model.generateContent({
            contents: [
                {
                    role: "user",
                    parts: [
                        { text: prompt },
                        {
                            inline_data: {
                                mime_type: "image/jpeg",
                                data: imageData
                            }
                        }
                    ]
                }
            ]
        });

        if (!result.response) {
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh n√†y.";
        }

        let responseText = result.response.text();
        
        // L∆∞u v√†o history
        saveToHistory(senderId, "user", "[ƒê√£ g·ª≠i m·ªôt h√¨nh ·∫£nh]");
        saveToHistory(senderId, "model", responseText);
        
        return responseText;

    } catch (error) {
        console.error('‚ùå Error analyzing image:', error);
        return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch h√¨nh ·∫£nh.";
    }
} 